<% /* Account Update — two separate forms: info update + password change.
      I added:
      - autocomplete attributes (given-name, family-name, email, new-password)
      - aria-invalid + aria-describedby toggling when errors exist
      - inline field error hints (so SR users don’t rely only on the top list)
      - slightly stronger client-side checks that mirror server rules
*/ %>

<h1><%= title %></h1>

<%- messages() %>

<% /* helper fns so I can mark fields invalid when express-validator returns errors */ %>
<% const hasErr = (n) => Array.isArray(errors) && errors.some(e => e.path === n); %>
<% const firstErrMsg = (n) => {
     if (!Array.isArray(errors)) return null
     const hit = errors.find(e => e.path === n)
     return hit ? hit.msg : null
   }; %>

<% if (typeof errors !== "undefined" && errors && errors.length) { %>
  <div class="form-errors" role="alert" aria-live="assertive" id="form-error-list">
    <ul>
      <% errors.forEach(function(err){ %>
        <li><%= err.msg %></li>
      <% }) %>
    </ul>
  </div>
<% } %>

<section class="account-update">
  <h2>Account Update</h2>

  <form class="auth-form" action="/account/update" method="post" novalidate>
    <div class="form-grid">
      <div class="form-row">
        <label for="account_firstname">First name</label>
        <input
          id="account_firstname"
          name="account_firstname"
          type="text"
          required
          autocomplete="given-name"
          aria-invalid="<%= hasErr('account_firstname') ? 'true' : 'false' %>"
          aria-describedby="<%= hasErr('account_firstname') ? 'account_firstname-error' : '' %>"
          value="<%= locals.account_firstname || account_firstname || '' %>">
        <% if (hasErr('account_firstname')) { %>
          <small class="field-error" id="account_firstname-error"><%= firstErrMsg('account_firstname') %></small>
        <% } %>
      </div>

      <div class="form-row">
        <label for="account_lastname">Last name</label>
        <input
          id="account_lastname"
          name="account_lastname"
          type="text"
          required
          autocomplete="family-name"
          aria-invalid="<%= hasErr('account_lastname') ? 'true' : 'false' %>"
          aria-describedby="<%= hasErr('account_lastname') ? 'account_lastname-error' : '' %>"
          value="<%= locals.account_lastname || account_lastname || '' %>">
        <% if (hasErr('account_lastname')) { %>
          <small class="field-error" id="account_lastname-error"><%= firstErrMsg('account_lastname') %></small>
        <% } %>
      </div>

      <div class="form-row">
        <label for="account_email">Email address</label>
        <input
          id="account_email"
          name="account_email"
          type="email"
          required
          autocomplete="email"
          autocapitalize="none"
          autocorrect="off"
          aria-invalid="<%= hasErr('account_email') ? 'true' : 'false' %>"
          aria-describedby="<%= hasErr('account_email') ? 'account_email-error' : '' %>"
          value="<%= locals.account_email || account_email || '' %>">
        <% if (hasErr('account_email')) { %>
          <small class="field-error" id="account_email-error"><%= firstErrMsg('account_email') %></small>
        <% } %>
      </div>
    </div>

    <!-- keep id hidden -->
    <input type="hidden" name="account_id" value="<%= locals.account_id || account_id %>">

    <div class="form-actions">
      <button class="btn" type="submit">Save Changes</button>
    </div>
  </form>
</section>

<hr aria-hidden="true" />

<section class="password-update">
  <h2>Change Password</h2>
  <p class="field-hint" id="pw-requirements">
    Entering a new password will replace your current password. It must be at least 12 characters and include 1 uppercase letter, 1 number, and 1 special character.
  </p>

  <form class="auth-form" action="/account/update-password" method="post" novalidate>
    <div class="form-row">
      <label for="account_password">New password</label>
      <input
        id="account_password"
        name="account_password"
        type="password"
        required
        autocomplete="new-password"
        aria-describedby="pw-requirements"
        placeholder="At least 12 characters">
    </div>

    <!-- keep id hidden -->
    <input type="hidden" name="account_id" value="<%= locals.account_id || account_id %>">

    <div class="form-actions">
      <button class="btn" type="submit">Update Password</button>
    </div>
  </form>
</section>

<script>
  // minimal client-side guards — I match the server rules where it's cheap to do it
  (function () {
    // quick helpers
    function setInvalid(el, msgId) {
      if (!el) return
      el.setAttribute('aria-invalid', 'true')
      if (msgId) el.setAttribute('aria-describedby', msgId)
    }
    function clearInvalid(el) {
      if (!el) return
      el.setAttribute('aria-invalid', 'false')
    }
    function emailLooksValid(v) {
      // very basic email check; server enforces the real thing
      return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v)
    }
    function strongPassword(v) {
      // mirrors server-side: 12+, 1 upper, 1 number, 1 symbol
      return /^(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]).{12,}$/.test(v)
    }

    const infoForm = document.querySelector('form[action="/account/update"]')
    const pwdForm  = document.querySelector('form[action="/account/update-password"]')

    if (infoForm) {
      infoForm.addEventListener('submit', function (e) {
        const fn = document.getElementById('account_firstname')
        const ln = document.getElementById('account_lastname')
        const em = document.getElementById('account_email')
        let firstInvalid = null

        // reset state
        clearInvalid(fn); clearInvalid(ln); clearInvalid(em)

        // required checks
        if (!fn.value.trim()) { setInvalid(fn, 'account_firstname-error'); firstInvalid = firstInvalid || fn }
        if (!ln.value.trim()) { setInvalid(ln, 'account_lastname-error');  firstInvalid = firstInvalid || ln }
        if (!em.value.trim() || !emailLooksValid(em.value)) {
          setInvalid(em, 'account_email-error'); firstInvalid = firstInvalid || em
        }

        if (firstInvalid) {
          e.preventDefault()
          firstInvalid.focus()
          // I keep the global error list, but this is enough to block obvious mistakes
        }
      })
    }

    if (pwdForm) {
      pwdForm.addEventListener('submit', function (e) {
        const pw = document.getElementById('account_password')
        clearInvalid(pw)
        if (!strongPassword(pw.value)) {
          setInvalid(pw, 'pw-requirements')
          e.preventDefault()
          pw.focus()
        }
      })
    }
  })()
</script>
